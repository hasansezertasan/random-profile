# Copyright 2024 Hasan Sezer Ta≈üan <hasansezertasan@gmail.com>
# Copyright (C) 2024 <hasansezertasan@gmail.com>
import datetime
from typing import List

from pydantic import BaseModel, computed_field


class Profile(BaseModel):
    first_name: str
    """
    First name of the profile.
    Method: Generated by the factory.
    """
    last_name: str
    """
    Last name of the profile.
    Method: Generated by the factory.
    """
    username: str
    """
    Username of the profile.
    Method: Generated using first name and last name.
    """
    password: str
    """
    Password of the profile.
    Method: Generated by the factory.
    """
    email: str
    """
    Email of the profile.
    Method: Generated using the username and random domain.
    """
    phone_number: str
    """
    Phone number of the profile.
    Method: Generated by the factory.
    """
    profession: str
    """
    Job of the profile.
    Method: Generated by the factory.
    """
    date_of_birth: datetime.date
    """
    Date of birth of the profile.
    Method: Generated by the factory.
    """
    city: str
    """
    City of the profile.
    Method: Generated by the factory.
    """
    address: str
    """
    Address of the profile.
    Method: Generated by the factory.
    """
    biography: str
    """
    Biography of the profile.
    Method: ...
    """
    interests: List[str]
    """
    Interests of the profile.
    Method: ...
    """
    profile_picture: str
    """
    Profile picture path of the profile.
    Method: ...
    """
    website: str
    """
    Website of the profile.
    Method: Generated using the username and random domain.
    """

    @computed_field
    def age(self) -> int:
        today = datetime.datetime.now(tz=datetime.timezone.utc).date()
        return (
            today.year
            - self.date_of_birth.year
            - (
                (today.month, today.day)
                < (self.date_of_birth.month, self.date_of_birth.day)
            )
        )

    @computed_field
    def full_name(self) -> str:
        return f"{self.first_name} {self.last_name}"
